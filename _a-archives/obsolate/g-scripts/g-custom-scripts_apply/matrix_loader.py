# üß© matrix_loader.py ‚Äì Dynamick√Ω loader pre frakt√°lny matrix syst√©m
import json, os, subprocess

CONFIG_PATH = "./matrix_registry.json"

# === Naƒç√≠tanie konfigur√°cie ===
def load_matrix_config(path=CONFIG_PATH):
    if not os.path.exists(path):
        print(f"‚ùå Konfiguraƒçn√Ω s√∫bor {path} neexistuje.")
        return None
    with open(path, 'r', encoding='utf-8') as f:
        return json.load(f)

# === Spustenie scriptu podƒæa mena ===
def run_script(script_name):
    try:
        subprocess.run(["python", script_name])
    except Exception as e:
        print(f"‚ö†Ô∏è Chyba pri sp√∫≈°≈•an√≠ {script_name}: {e}")

# === Zobrazenie indexov ===
def display_index(indexes):
    print("\nüß† AKT√çVNE INDEXY:")
    for k, v in indexes.items():
        print(f"- {k}: {v}")

# === Zobrazenie prepojenej pam√§ti ===
def display_memory_links(memory):
    print("\nüîó LINKED MEMORY:")
    for m in memory:
        print(f"- {m}")

# === Main loader ===
def main():
    config = load_matrix_config()
    if not config:
        return

    print("\nüì¶ MATRIX LOADER AKTIVOVAN√ù")
    display_index(config.get("index_definitions", {}))
    display_memory_links(config.get("linked_memory", []))

    for key, script in config.get("scripts", {}).items():
        print(f"\n‚ñ∂Ô∏è Sp√∫≈°≈•am: {key} ({script})")
        run_script(script)

if __name__ == "__main__":
    main()
