Rozdelenie a Implementácia GPT Actions pre Osobného Asistenta

Praktické implementácie a špecifikácie GPT Actions
GPT Actions sú definované operácie, ktoré môžu GPT agenti vykonávať nad rámec bežnej konverzácie. V systéme Geppetto/Archivon sú tieto akcie rozdelené do troch hlavných kategórií, čo zodpovedá vrstvenej architektúre znalostí a funkcionality. Nižšie popisujeme Core Actions, Orchestráciu a rozhodovanie a Deploy Actions – každú časť s príkladmi, formátmi výstupov a odporúčaniami pre integráciu do systému Geppetto/Archivon.
Core Actions (Základné akcie)
Core Actions predstavujú základné, interné úlohy potrebné na údržbu a budovanie znalostnej bázy a konzistencie GPT agenta. Tieto akcie sa starajú o dokumentáciu, konzistentné pomenovania, prácu s verziami (Git) a systematický zápis informácií do znalostných vrstiev systému.
Dokumentácia a znalostné bázy: Core akcie zabezpečujú generovanie a aktualizáciu dokumentácie ku kódu a agentovi. Napríklad akcia môže vygenerovať alebo upraviť README.md so súhrnom funkcií agenta. Formát výstupu je spravidla Markdown (napr. stručné prehľadové .md súbory do ~5000 znakov
file-hsrtgfbrejc1kkz7nyepb5
). Tým je zaručené, že každá nová schopnosť alebo zmena je zdokumentovaná pre neskoršie využitie. Dokumentácia je následne indexovaná v Archivone, takže je okamžite vyhľadateľná a auditovateľná.
Naming Conventions (názvoslovie): Dodržiavanie konzistentného názvoslovia je kľúčové pre prehľadnosť systému. Core Actions môžu automaticky aplikovať konvencie pomenovania – či už ide o názvy súborov, funkcií, alebo samotného GPT agenta. Napríklad GPT Builder pri návrhu mena agenta vyžaduje, aby názov nebol v CamelCase a spĺňal definované pravidlá. V konfigurácii systému existuje manifest (napr. g-naming-convention.yml), ktorý špecifikuje tieto pravidlá a core akcia ich vie použiť na kontrolu či generovanie názvu. Príklad: ak používateľ zadá meno v nevhodnom formáte, core akcia apply_naming_convention ho upraví na správny tvar (napr. “AgentXHelper” -> “Agent X Helper” podľa konvencie).
Prístup ku Git: Integrácia s Git je ďalšou dôležitou súčasťou Core Actions. GPT agent môže prostredníctvom akcií typu git_commit alebo git_sync pracovať s verziami zdrojového kódu a konfiguračných súborov. Praktická implementácia napríklad využíva skript auto_git_sync.py (ako súčasť toolkitu Geppetta) na automatickú synchronizáciu zmenených súborov s repozitárom. Týmto spôsobom každý významný výstup (či už nová schopnosť v kóde, alebo aktualizovaný manifest) môže byť: 1) commitnutý s generovaným logom správy, 2) pushnutý do príslušnej vetvy repozitára. Odporúča sa, aby každý commit reprezentoval jednu logickú akciu (pre ľahký audit) a aby commit message jasne uvádzala referenciu na danú GPT Action (napr. „CoreAction-DocUpdate: Aktualizácia dokumentácie funkcie X“).
Zápis do znalostných vrstiev: Systém Archivon rozdeľuje znalosti do vrstiev s rôznymi prefixmi (napr. core_, mirror_, deploy_), ktoré odrážajú pôvod a účel informácie
file-hsrtgfbrejc1kkz7nyepb5
. Core Actions majú na starosti systematický zápis dôležitých informácií do “core” vrstvy – teda do trvalých znalostí agenta. Napríklad výsledok akcie update_knowledge_base zapíše nové fakty alebo pravidlá do jadrovej znalostnej bázy (core) vo forme JSON indexu alebo YAML manifestu. Formát týchto dát je štruktúrovaný: dôležité údaje ako aktuálny stav systému sa ukladajú v JSON (napr. core_state.json pre posledný známy stav
file-hsrtgfbrejc1kkz7nyepb5
), kontextové meta-informácie v .yml a obsiahlejší popis v .md. Core akcie tak zaručujú, že každý nový poznatok, pravidlo či konfigurácia je uložená konzistentne a je okamžite dostupná pre indexovanie a audit (Archivon automaticky indexuje nové záznamy). Odporúča sa dodržiavať prefixové označenie pri tvorbe súborov – napríklad akcia, ktorá pridáva znalosti o novej schopnosti agenta, by mala vytvoriť záznam s názvom začínajúcim core_ability_nazov.json a adekvátne upraviť manifest. Tým sa udrží poriadok a Archivon ho správne zaradí do indexov.
Príklady Core Actions:
update_documentation – Vygeneruje alebo upraví dokumentáciu (README, manuál) na základe posledných zmien.
apply_naming_convention – Skontroluje názvy entít (súborov, premenných, názov GPT) a upraví ich podľa konvencie (napr. odstráni CamelCase, nahradí medzery podčiarkovníkmi alebo podobne podľa pravidiel).
git_commit_changes – Zabalí aktuálne modifikácie do commitu, pomenuje commit podľa akcie a vykoná push do Git repozitára (prípadne vytvorí merge request, ak je to súčasť workflow).
update_knowledge_base – Zapíše nové informácie do znalostnej bázy (core vrstvy). Vytvorí napríklad nový JSON uzol s prefixom core_ a aktualizuje príslušný YAML manifest, aby bolo možné tieto znalosti načítať pri ďalších dotazoch.
Odporúčania pre integráciu (Core): Core Actions by mali byť volané vždy, keď dôjde k podstatnej zmene internej reprezentácie alebo znalostí GPT agenta. Geppetto (orchestrátor) zabezpečí, že po dokončení významnej úlohy (napr. naučenie sa novej informácie) je spustená príslušná core akcia na uloženie výsledku. Vďaka integrácii s Archivon je každý taký záznam indexovaný a priradený správnej vrstve, čo zaručuje auditovateľnosť. Pri implementácii core akcií dbajte na atomickosť – každá akcia vykoná jednu logickú vec a zapíše ju konzistentne (napr. ak update_knowledge_base zapisuje viac súborov, mala by to urobiť v jednej operácii alebo transakcii, aby pipeline vedela indexovať konzistentný stav). Tiež sa odporúča využiť modul validácie (bit.core.validate) na overenie integrity po zápise – ten skontroluje, či nedošlo ku kolíziám alebo nekonzistencii v indexoch
file-hsrtgfbrejc1kkz7nyepb5
.
Orchestrácia a rozhodovanie
Táto kategória GPT Actions pokrýva dynamické, viacstupňové schopnosti agenta – od získavania informácií z externých zdrojov (napr. z webu), cez ich analýzu a tagovanie, až po interné rozhodovanie a návrh riešení. Tieto akcie umožňujú GPT agentovi správať sa ako orchestrátor úloh: rozložiť komplexný problém na menšie časti, zhromaždiť potrebné dáta a postupne dospieť k optimálnemu riešeniu. V praxi Geppetto často využíva tieto akcie pri komplikovanejších požiadavkách, kde je potrebné vyhľadať dodatočné informácie alebo premyslieť stratégiu riešenia.
Analýza webu a externých zdrojov: Orchestrátorské akcie umožňujú GPT agentovi vykonávať vyhľadávanie a získavanie údajov mimo vlastnej databázy. Akcia typu web_search(query) môže napríklad volať externé API (Google/Bing alebo interný knowledge base vyhľadávač) a vrátiť relevantné výsledky. Nasleduje akcia fetch_content(url), ktorá získa detailný obsah zvolenej URL (či už článok, dokumentáciu z webu, alebo príspevok na fóre). Tieto akcie sú implementované ako volania REST API (v súlade s konceptom OpenAI "GPT Actions" pre volanie externých služieb), pričom GPT z prirodzeného jazyka vygeneruje potrebný dotaz/URL. Formát výstupu takýchto akcií je textový (obsah stránky) alebo štruktúrovaný (napr. JSON z API). Dôležité je, že agent následne informácie parsuje a ukladá len relevantné časti – buď do dočasnej pamäte, alebo do príslušnej znalostnej vrstvy, ak ide o trvalejšie poznatky. Odporúča sa obmedziť rozsah získavaných dát (filtrovať výsledky) a citovať zdroje pri neskoršom použití (aby bolo možné spätné overenie).
Tagovanie informácií: Po získaní surových dát nasleduje akcia na označkovanie (tagovanie) informácií. GPT agent tu klasifikuje a štruktúruje dáta – priradí im kľúčové slová, kategórie alebo interné značky. V rámci systému Archivon existuje mechanizmus tagov (napr. #geppetto, #pipeline, #validator, atď. – viď ukážku tagov
file-hsrtgfbrejc1kkz7nyepb5
), ktoré pomáhajú kategorizovať znalosti naprieč vrstvami. Akcia tag_content(data) zanalyzuje získaný obsah a pridá mu metaúdaje: napríklad označí úryvok textu tagmi #riešenie, #problém, #kontext podľa jeho charakteru. Výstup môže byť vo formáte YAML (napr. súbor unpack_info.yml obsahujúci extrahované informácie a ich tagy
file-hsrtgfbrejc1kkz7nyepb5
) alebo priamo zápis do indexu s uvedením tagov. Tagovanie zjednoduší následné rozhodovanie tým, že agent vie, ktoré časti dát sú napr. požiadavky používateľa, ktoré sú technické špecifikácie a ktoré možné riešenia. Odporúčanie: Udržiavať sadu tagov konzistentnú a zmysluplnú – definovať vopred možné kategórie, aby tagovanie automaticky smerovalo obsah do správnych “zásuviek” systému Archivon.
Rozhodovanie a plánovanie riešení: Na základe zhromaždených a označených informácií nasledujú akcie pre samotné rozhodovanie. GPT agent tu v podstate vykonáva internú „poradu“ – vyhodnotí relevantnosť údajov, porovná možnosti a naplánuje ďalšie kroky. Implementačne môže ísť o interný krok (hidden chain-of-thought) alebo explicitnú akciu evaluate_options či plan_solution. Príklad: po nazbieraní informácií o probléme a možných prístupoch akcia evaluate_options ohodnotí každú možnosť (napr. na základe kritérií ako účinnosť, komplexnosť, riziká) a zapíše výsledok do štruktúry (napr. JSON s bodovým hodnotením každého riešenia). Následne plan_solution zostaví odporúčaný postup – môže ísť o jednoduchý zoznam krokov alebo podrobný scenár, ktorý agent navrhne používateľovi. Tieto akcie využívajú schopnosť GPT modelu syntetizovať informácie a logicky uvažovať. Často prebiehajú iteratívne: agent (Geppetto) môže viackrát prejsť cyklus vyhľadaj → analyzuj → rozhodni, kým nie je spokojný s plánom. Integrácia Archivonu tu spočíva v logovaní týchto krokov (napr. do mirror logu vo formáte .jsonl
file-hsrtgfbrejc1kkz7nyepb5
, ktorý uchováva časovú postupnosť udalostí a rozhodnutí). Tým je zaistené, že aj vnútorné úvahy sú auditovateľné a dajú sa spätne sledovať tzv. bookmark systémom (každý dôležitý krok môže byť označený "záložkou" pre neskoršie prehliadanie histórie
file-hsrtgfbrejc1kkz7nyepb5
).
Príklady Orchestration/Decision Actions:
web_search(query) – Vyhľadá externé informácie k zadanému dopytu (napr. problém, na ktorý GPT nemá znalosti lokálne). Výsledkom je zoznam odkazov alebo úryvkov textu.
fetch_content(url) – Stiahne obsah konkrétneho zdroja (webstránky, dokumentu) na základe URL. Typicky sa volá po web_search, aby získal detailnejšie dáta z vybraného odkazu.
tag_content(data) – Automaticky otaguje získaný obsah. Napríklad text z webu rozdelí na časti a pridelí im tagy (#fakty, #požiadavka, #riešenie, atď.), prípadne identifikuje domény znalostí pre zaradenie do správnej vrstvy.
evaluate_options(criteria) – Vyhodnotí viacero možných riešení alebo odpovedí podľa zadaných kritérií. Môže vrátiť štruktúrovaný prehľad možností s uvedením výhod/nevýhod každej možnosti.
plan_solution(goal) – Vytvorí konkrétny plán krokov na dosiahnutie cieľa. Napríklad vygeneruje postupnosť úloh alebo bodov, ktoré by mal agent/používateľ vykonať. Tento plán môže byť následne prezentovaný používateľovi alebo odoslaný ďalším akciám na realizáciu.
Odporúčania pre integráciu (Orchestrácia): Orchestrátor (Geppetto) by mal dynamicky rozhodovať, kedy aktivovať tieto akcie. Typický scenár: používateľ položí komplexnú otázku → Geppetto vyvolá web_search a fetch_content pre doplnenie znalostí → nasleduje tag_content na utriedenie informácií → potom séria rozhodovacích akcií (evaluate_options, prípadne ďalší search ak niečo chýba) → a nakoniec plan_solution alebo priamo vytvorenie odpovede. Všetky medzivýsledky by sa mali ukladať buď do dočasných štruktúr alebo mirror vrstvy (reflexná vrstva) systému, aby boli dostupné pre audit, no neznečisťovali trvalé core znalosti nepotrebnými detailmi. Dôležité je zaistiť, že akcie majú definované rozhrania – napr. výstup web_search (zoznam výsledkov) slúži ako vstup pre fetch_content atď., aby reťazenie fungovalo plynule. Integrácia do Archivonu znamená, že každé rozhodnutie a použitý zdroj má stopu: odporúča sa ukladať meta-informácie o zdrojoch (napr. URL, názov článku) a o rozhodnutiach (napr. zvolené kritérium) do logu alebo manifestu. Tým je možné nielen dohľadať, prečo agent dospel k určitému riešeniu, ale aj automaticky indexovať nové fakty zistené počas procesu do znalostných vrstiev (ak sú relevantné pre budúce použitie). Celkovo Orchestration Actions dávajú systému flexibilitu a sebestačnosť v riešení úloh – integrujte ich tak, aby GPT vedel, kedy má čo použiť (napr. pomocou pravidiel alebo modelového promptu, ktorý navádza GPT, že ak nemá dostatok info, má hľadať atď.). Geppetto ako nadradený orchestrátor drží tieto pravidlá a usmerňuje volanie akcií v správnom poradí.
Deploy Actions (Nasadzovacie akcie)
Deploy Actions pokrývajú finálnu fázu práce GPT agenta – keď je navrhnuté riešenie alebo vytvorený nový GPT profil či kód, tieto akcie zabezpečujú jeho otestovanie, nasadenie a začlenenie do pipeline systému. Inými slovami, ide o kroky potrebné na to, aby sa výsledok práce agenta dostal do produkčného prostredia alebo do kontinuálneho integračného procesu (CI/CD), a aby bol celý proces zaznamenaný pre budúce iterácie.
Buildovanie a príprava nasadenia: Keď GPT agent vytvorí nové riešenie (či už kód, alebo konfiguráciu iného agenta), prvým krokom je zostavenie tohto riešenia do nasaditeľnej podoby. Akcia package_solution (alebo build_agent) môže napríklad zozbierať všetky relevantné súbory, konfigurácie a dáta a zabaliť ich do archívu (ZIP). V kontexte Geppetto/Archivon sa často používa zjednotený špecifikačný súbor – napríklad gpt_builder_spec.yml – ktorý popisuje nového GPT agenta. Deploy akcia ho môže vygenerovať alebo aktualizovať. Ďalej nasleduje krok automatizovaného spracovania: systémový AutoDeployIndexPipeline preberie tento archív a vykoná: rozbalenie, indexáciu, klasifikáciu prefixov, smerovanie zápisu a zápis do indexov
file-hsrtgfbrejc1kkz7nyepb5
. GPT Action môže priamo iniciovať tento proces – napr. volaním skriptu deploy_agent.py – alebo pripraviť artefakty tak, aby ich pipeline vedela automaticky zachytiť. Formát výstupu: typicky kombinácia viacerých formátov – zdrojový kód (napr. .py súbory), konfigurácia (YML/JSON manifesty) a dokumentácia (MD) – všetko zabalené pre nasadenie. Odporúča sa dodržiavať štruktúru projektu tak, aby pipeline vedela nájsť čo potrebuje (napr. mať koreňový manifest a podsložky pre core, naming, tools, atď., podobne ako je to definované v špecifikácii systému).
Testovanie a validácia: Pred ostrým nasadením by mal agent (alebo pipeline) overiť, že navrhnuté riešenie funguje. GPT môže vygenerovať testovacie scenáre alebo priamo kód testov (unit testy, integration testy) a nasadzovacia akcia run_tests ich spustí. V prostredí pipeline to môže byť realizované napríklad volaním CI jobu alebo interným modulom (napr. využitie validator.py komponentu
file-hsrtgfbrejc1kkz7nyepb5
, ktorý okrem iného kontroluje konzistenciu súborov a vytvára backup). Praktická implementácia: Deploy akcia získa výsledky testov a vyhodnotí ich. Ak testy prejdú, pokračuje sa nasadením; ak zlyhajú, akcia môže buď: 1) oznámiť užívateľovi, že riešenie zlyhalo a navrhnúť úpravy, alebo 2) spustiť Orchestration akcie na analyzovanie logov a automatickú opravu. Testovacie výstupy by mali byť logované (napr. do .jsonl logu alebo ako súčasť reportu v Markdown) a pripojené k záznamom o nasadení pre transparentnosť.
Nasadenie do produkcie a zápis do pipeline: Po úspešnom otestovaní nastáva finálny deploy. V závislosti od povahy projektu to môže znamenať nasadiť novú verziu aplikácie, publikovať nového GPT agenta do produkčného zoznamu, alebo začať používať novú konfiguráciu. Akcia deploy_to_production môže napríklad vytvoriť release v Git (tag alebo release branch) a zavolať API pipeline na nasadenie do produkcie. V rámci Archivon ekosystému nasadzovacie akcie úzko spolupracujú s pipeline systémom – často postačí premiestniť alebo označiť pripravený balíček a pipeline (AutoDeployIndexPipeline) ho spracuje podľa preddefinovaného toku
file-hsrtgfbrejc1kkz7nyepb5
. Zápis do pipeline systémov znamená, že GPT Action môže priamo modifikovať konfigurácie CI/CD (napr. upraviť YAML súbor s definíciou pipeline, pridať nový job alebo krok) alebo jednoducho uložiť meta-informácie o nasadení (napr. verzia, čas, autor) do databázy, ktorú pipeline sleduje. Archivon zabezpečuje, že všetky súvisiace artefakty nasadenia sú zaevidované: odkladá sa snapshot pred zmenou (.bak súbory) a po nasadení sa aktualizujú indexy (napr. core_state.json dostane nový záznam o verzii)
file-hsrtgfbrejc1kkz7nyepb5
. Tým je garantované, že systém vie, ktorá verzia je aktuálna a že sa možno kedykoľvek vrátiť k staršej (audit trail).
Príklady Deploy Actions:
package_solution – Zostaví všetky potrebné súbory a vytvorí balíček (napr. ZIP) pripravený pre nasadenie. Zároveň vygeneruje manifest nasadenia (zoznam súborov, verziu, kontrolné súčty).
run_tests – Spustí testy asociované s riešením. Môže volať napr. skripty pytest pre kód, alebo simulovať chat s nasadeným GPT v "playground" móde na vyskúšanie jeho správania. Výstupom je report testov (prešiel/neprešiel + logy).
deploy_to_production – Nasadí agentov alebo kód do produkčného prostredia. Napríklad prekopíruje vygenerované súbory na produkčný server, alebo využije API cloudu na vytvorenie nového behu služby. Môže taktiež oznámiť nasadenie používateľovi (notifikácia).
update_pipeline_config – Upraví konfiguráciu pipeline tak, aby zahrnula nové komponenty. Napríklad pridá nový krok do CI (linting, build, nasadenie kontajnera) v .yml súbore pipeline, alebo zapne auto-indexovanie pre novú znalostnú vrstvu.
log_deployment – Zapíše záznam o nasadení do systému Archivon/Geppetto. Vytvorí záznam (napr. v deploy_log.jsonl alebo update v archivon.route), ktorý obsahuje kto/čo bolo nasadené, kedy, z akého zdrojového commitu, a kam (prostredie). Tento log umožní Geppettovi a adminom neskôr prechádzať históriu nasadení.
Odporúčania pre integráciu (Deploy): Nasadzovacie akcie by mali byť spúšťané sekvenčne na záver procesu riešenia úlohy alebo vývoja agenta. Geppetto orchestrátor typicky iniciuje deploy akcie po potvrdení od používateľa (napr. používateľ schváli navrhnuté riešenie alebo dokončí tvorbu custom GPT v GPT Builderi). Dôležité je, aby tieto akcie boli bezpečné a reverzibilné: integrujte mechanizmy zálohovania a kontroly (ako spomenutý .bak snapshot a validator) pred aplikovaním zmien naostro
file-hsrtgfbrejc1kkz7nyepb5
. Takisto využite možnosti Archivonu pre audit – každý nasadený artefakt nech dostane unikátny identifikátor alebo verziu a nech sa uloží jeho odkaz do indexov (napr. do archivon.route súboru spolu s cestou k artefaktu
file-hsrtgfbrejc1kkz7nyepb5
). V pipeline prostredí sa odporúča nasadzovacie akcie automatizovať čo najviac: namiesto manuálneho zásahu nech GPT Action spustí potrebné skripty alebo API volania. Napríklad, ak existuje CI/CD server, nech akcia deploy_to_production pošle HTTP požiadavku na trigger nasadenia s parametrami. Integrácia do Geppetto znamená aj to, že po nasadení by mal systém aktualizovať svoj stav – napr. označiť aktuálnu verziu agenta ako „active“ v core stave, načítať novú konfiguráciu do behu, a informovať používateľa o výsledku. Archivon ako backend zároveň indexuje nové súbory (či už logy z testov, alebo aktualizované manifesty) v deploy vrstve, čím sa uzatvorí kruh: všetko, čo GPT agent spravil od počiatočného dopytu po finálne nasadenie, je zdokumentované a dohľadateľné.
Integrácia do systému Geppetto/Archivon
Na záver, tieto tri kategórie GPT Actions spolu tvoria ucelený pracovný tok v rámci systému Geppetto/Archivon. Geppetto (orchestrátor) prepája Core, Orchestration a Deploy akcie tak, aby agent postupoval logicky: od inicializácie a zápisu znalostí (Core) cez získanie a spracovanie informácií (Orchestrácia) až po implementáciu výsledkov (Deploy). Archivon slúži ako pamäť a auditný modul – vďaka prefixom pre každú vrstvu (core_, mirror_, deploy_ atď.) dokáže systém automaticky zatriediť každý výstup akcie do správnej „zásuvky“
file-hsrtgfbrejc1kkz7nyepb5
. Odporúčame vývojárom integrovať GPT Actions v duchu modularity a sledovateľnosti: každá akcia by mala mať jasne definovaný vstup/výstup, mala by zanechať stopu (log alebo záznam) a mala by spolupracovať s ostatnými vrstvami. Tým dosiahnete, že váš custom GPT (resp. rodina GPT agentov v Geppettovi) bude nielen výkonný, ale aj udržiavateľný a dôveryhodný – každý krok od nápadu po nasadenie je pod kontrolou a je možné ho spätne analyzovať a iteratívne vylepšovať.